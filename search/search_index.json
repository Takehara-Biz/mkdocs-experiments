{"config":{"lang":["ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Experiments","text":"<p>This web site is to practice and experiment MkDocs (&amp;MkDocs Material).</p> <p>My Github repository</p>"},{"location":"#official-sites","title":"Official Sites","text":"<ul> <li>MkDocs</li> <li>MkDocs Material</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Markdown\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u4f5c\u308c\u308bMkDocs\u304c\u4fbf\u5229\u904e\u304e\u308b</li> <li>mkdocs\u3092\u4f7f\u3063\u305fGitHub Pages\u306e\u4f5c\u6210\u65b9\u6cd5</li> </ul>"},{"location":"page1/","title":"Page1","text":"<p>page1</p>"},{"location":"page2/","title":"Page2","text":"<p>page2</p>"},{"location":"experiments/Admonitions/","title":"Admonitions","text":""},{"location":"experiments/Admonitions/#shape-patterns","title":"Shape Patterns","text":"<p>Title here</p> <p>Content here.</p> <p>Empty Title</p> Can fold content <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Can fold content with opening <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"experiments/Admonitions/#icon-and-color-patterns","title":"Icon and Color Patterns","text":"<p>Note</p> <p>Note</p> <p>Abstract</p> <p>Abstract</p> <p>Info</p> <p>Info</p> <p>Tip</p> <p>Tip</p> <p>Success</p> <p>Success</p> <p>Question</p> <p>Question</p> <p>Warning</p> <p>Warning</p> <p>Failure</p> <p>Failure</p> <p>Danger</p> <p>Danger</p> <p>Bug</p> <p>Bug</p> <p>Example</p> <p>Example</p> <p>Quote</p> <p>Quote</p>"},{"location":"experiments/CodeBlocks/","title":"Code Blocks","text":"<pre><code>import tensorflow as tf\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>\u2191 highlighting the lines from 2 to 3.</p>"},{"location":"experiments/ContentTabs/","title":"Content Tabs","text":"Tab 1Tab 2 Tab 3 <p>The content of Tab 1</p> <p>The content of Tab 2</p> <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <p>The content of Tab 3</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"experiments/DataTables/","title":"Data tables","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"experiments/Diagrams/","title":"Diagrams","text":""},{"location":"experiments/Diagrams/#flowcharts","title":"flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"experiments/Diagrams/#sequence-diagrams","title":"sequence diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"experiments/Diagrams/#state-diagrams","title":"state diagrams","text":"<pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"experiments/Diagrams/#class-diagrams","title":"class diagrams","text":"<pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre>"},{"location":"experiments/Diagrams/#er-diagram","title":"ER diagram","text":"<pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"}]}